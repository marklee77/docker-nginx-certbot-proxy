#!/usr/bin/env python

from mako.lookup import TemplateLookup

import argparse
import os
import shutil
import subprocess

def update(**kwargs):

    server_name = kwargs['server_name']
    webroot_path = os.path.join(kwargs['certbot_webroot_dir'], server_name)
    http_config_dir = kwargs['http_config_dir']
    https_config_dir = kwargs['https_config_dir']

    kwargs['webroot_path'] = webroot_path

    os.makedirs(webroot_path, 0755)

    lookup = TemplateLookup(directories=kwargs['template_dir'])
    http_server_template = lookup.get_template('http-server.mako')
    https_server_template = lookup.get_template('https-server.mako')

    http_file = open(os.path.join(http_config_dir, server_name), "w")
    http_file.write(http_server_template.render(**kwargs))
    http_file.close()

    subprocess.call(["/usr/sbin/nginx", "-s", "reload"])

    certbot_cmd = ["/usr/bin/certbot", "certonly", "--webroot",
                   "--email", email, "--rsa-key-size", rsa_key_size,
                   "--domain", server_name, "--webroot-path", webroot_path]
    certbot_cmd += ["--agree-tos"] if agree_letsencrypt_tos else []
    subprocess.call(certbot_cmd)

    https_file = open(os.path.join(https_config_dir, server_name), "w")
    https_file.write(https_server_template.render(**kwargs))
    https_file.close()

    subprocess.call(["/usr/sbin/nginx", "-s", "reload"])


def delete(server_name=None, http_config_dir=None, https_config_dir=None,
           certbot_webroot_dir=None, **kwargs):

    try:
        os.remove(os.path.join(http_config_dir, server_name))
    except:
        pass

    try:
        os.remove(os.path.join(https_config_dir, server_name))
    except:
        pass

    try:
        shutil.rmtree(os.path.join(certbot_webroot_dir, server_name))
    except:
        pass


def list(http_config_dir=None, https_config_dir=None, **kwargs):
    http_servers = os.listdir(http_config_dir)
    https_servers = os.listdir(https_config_dir)
    servers = [x for x in set(http_servers) | set(https_servers)]
    for server in servers:
        print server


def main():
    parser = argparse.ArgumentParser(description="manage nginx servers")

    subparsers = parser.add_subparsers()
    subparsers.required = True
    subparsers.dest = 'command'
    parser.add_argument("--http-config-dir",
        default="/etc/nginx/http-servers", metavar="DIR",
        help="directory for http server configuration files")
    parser.add_argument("--https-config-dir",
        default="/etc/nginx/https-servers", metavar="DIR",
        help="directory for https server configuration files")
    parser.add_argument("--template-dir",
        default="/usr/local/share/nginx-server-manage/templates",
        metavar="DIR",
        help="directory for server configuration templates")
    parser.add_argument("--certbot-webroot-dir",
        default="/var/lib/certbot-webroot", metavar="DIR",
        help="directory for certbot webroots")

    update_subparser = subparsers.add_parser("update",
        help="update server")
    update_subparser.add_argument("-s", "--server-name",
        required=True, metavar="FQDN", help="server name as fqdn")
    update_subparser.add_argument("-x", "--default",
        action="store_true", help="set default_server")
    update_subparser.add_argument("-e", "--email",
        help="contact email (webmaster at domain if not given)")
    update_subparser.add_argument("-a", "--agree-letsencrypt-tos",
        action="store_true", help="pass --agree-tos to letsencrypt")
    update_subparser.add_argument("-k", "--rsa-key-size",
        type=int, default=2048, metavar="SIZE", help="RSA key size")
    update_group = create_subparser.add_mutually_exclusive_group()
    update_group.required = True
    update_group.add_argument("-r", "--redirect",
        metavar="URL", help="URL for 301 redirect")
    update_group.add_argument("-p", "--proxy",
        metavar="URL", help="URL for nginx proxy pass")
    update_group.add_argument("-d", "--directory",
        metavar="DIR", help="server root directory")

    delete_subparser = subparsers.add_parser(
        "delete", help="delete server")
    delete_subparser.add_argument("-s", "--server-name",
        required=True, metavar="FQDN", help="server name as fqdn")

    list_subparser = subparsers.add_parser("list", help="list servers")

    args = parser.parse_args()
    globals()[args.command](**vars(args))

if __name__ == "__main__":
    main()
