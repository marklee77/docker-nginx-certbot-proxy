#!/usr/bin/env python

from mako.lookup import TemplateLookup

import argparse
import os

def create(http_config_dir=None, https_config_dir=None, template_dir=None,
           **kwargs):

    server_name = kwargs['server_name']

    lookup = TemplateLookup(directories=template_dir)
    http_server_template = lookup.get_template('http-server.mako')
    https_server_template = lookup.get_template('https-server.mako')

    print template.render(**kwargs)

def delete(server_name=None, http_config_dir=None, https_config_dir=None,
           **kwargs):
    pass

def list(https_config_dir=None, **kwargs):
    pass

def main():
    parser = argparse.ArgumentParser(description="manage nginx servers")

    subparsers = parser.add_subparsers()
    subparsers.required = True
    subparsers.dest = 'command'
    parser.add_argument("--http-config-dir",
        default="/etc/nginx/http-servers", metavar="DIR",
        help="directory for http server configuration files")
    parser.add_argument("--https-config-dir",
        default="/etc/nginx/https-servers", metavar="DIR",
        help="directory for https server configuration files")
    parser.add_argument("--template-dir",
        default="/usr/local/share/nginx-server-manage/templates",
        metavar="DIR",
        help="directory for server configuration templates")

    create_subparser = subparsers.add_parser("create",
        help="create new server")
    create_subparser.add_argument("-s", "--server-name",
        required=True, metavar="FQDN", help="server name as fqdn")
    create_subparser.add_argument("-e", "--email",
        help="contact email (webmaster at domain if not given)")
    create_subparser.add_argument("-a", "--agree-letsencrypt-tos",
        action="store_true", help="pass --agree-tos to letsencrypt")
    create_subparser.add_argument("-k", "--rsa-key-size",
        type=int, default=2048, metavar="SIZE", help="RSA key size")
    create_group = create_subparser.add_mutually_exclusive_group()
    create_group.required = True
    create_group.add_argument("-r", "--redirect",
        metavar="URL", help="URL for 301 redirect")
    create_group.add_argument("-p", "--proxy",
        metavar="URL", help="URL for nginx proxy pass")
    create_group.add_argument("-d", "--directory",
        metavar="DIR", help="server root directory")

    delete_subparser = subparsers.add_parser(
        "delete", help="delete existing server")
    delete_subparser.add_argument("-s", "--server-name",
        required=True, metavar="FQDN", help="server name as fqdn")

    list_subparser = subparsers.add_parser("list", help="list servers")

    args = parser.parse_args()
    globals()[args.command](**vars(args))

if __name__ == "__main__":
    main()
